WEBVTT

00:01.000 --> 00:06.770
Now in the last few lessons we learned about what it's like to make queries against this graph queue

00:06.860 --> 00:13.120
all server that I've made for you you've seen what type of queries you have available as well as what

00:13.120 --> 00:15.610
kind of data you're able to fetch.

00:15.610 --> 00:20.190
But how do we actually bring this into our application.

00:20.260 --> 00:26.580
Well that's exactly what we're going to do in the subsequent lessons from this lesson forward.

00:26.590 --> 00:33.610
The first thing I want to point you towards is this Get hub repo so this repo actually contains the

00:33.610 --> 00:36.190
code that we're going to use to start from.

00:36.190 --> 00:38.290
This will be our starting point.

00:38.320 --> 00:41.230
So inside of your resources just go to this.

00:41.290 --> 00:46.280
You are all and I want you to clone down this repository.

00:46.450 --> 00:53.770
Now this repository is going to be very similar to the Salem repository that you used before the context

00:53.830 --> 01:00.420
API lesson the context API lesson mainly had one difference which I will show you.

01:00.430 --> 01:04.010
And it's simply one new component that I added in here.

01:04.200 --> 01:10.950
Other than that it's the exact same repo as the one you saw when you did the context API lessons.

01:10.950 --> 01:18.330
I've removed the redux saga and I've removed the CSF Sanjay as the main reasons I did that is just because

01:18.450 --> 01:24.810
what we're going to do is we're actually going to leverage the library that we're going to use to interact

01:24.810 --> 01:28.650
with our graph Q server to handle our local state.

01:29.370 --> 01:32.700
It's going to solve all of the problems in its own way.

01:32.700 --> 01:35.670
That redux and context API solve.

01:35.670 --> 01:42.970
The only difference is that here it leverages this graph QoL interface that we're going to see.

01:43.020 --> 01:47.630
So if that sounds a little bit weird it is going to be a little bit different.

01:47.670 --> 01:54.650
But I promise you that by the end of it you'll be convinced as to why it's a great service.

01:54.690 --> 02:01.240
So again click that clone button copy that link and let's go back to our terminal.

02:01.570 --> 02:05.620
Now go to the folder that you want to clone it into.

02:05.620 --> 02:11.980
Make sure it's not another project folder and just run get clone and then paste that key in.

02:12.300 --> 02:14.140
Now you can name it anything you want.

02:14.350 --> 02:19.580
I'm going to name it graph Q Crown clothing graph.

02:19.600 --> 02:24.710
Q L W L and we're gonna clone into it.

02:25.070 --> 02:28.690
So let's just see into our new graph.

02:28.690 --> 02:38.160
Your project and just open up this project and let me show you what new component it is that I've added.

02:38.240 --> 02:45.020
So if you go into the source and you go into components you'll see that there's this new spinner component.

02:45.080 --> 02:51.710
Now this beta component is just the spin our component that was inside of our with spin our higher order

02:51.710 --> 02:56.050
component that we've been using to handle our loader states.

02:56.060 --> 03:03.050
The only difference here is that I've simply removed away all of the higher order Components side of

03:03.050 --> 03:07.640
it and just exposed the base spinner component itself.

03:07.640 --> 03:08.470
That's all it is.

03:08.480 --> 03:11.340
It's pretty much just two divs with some styling on it.

03:11.450 --> 03:13.880
That's all it is now.

03:14.130 --> 03:16.240
That's pretty much the only difference.

03:16.380 --> 03:23.220
And the reason why we're going to see that I made this new component is because the library that we're

03:23.220 --> 03:31.230
going to use to integrate our ReACT application so that it can work with graph QoL well is this library

03:31.230 --> 03:34.300
called a Apollo client now.

03:34.500 --> 03:41.250
Apollo is a great library with a great team behind it that has built all of these features that make

03:41.250 --> 03:45.030
our lives much easier when it comes to working with graph.

03:45.030 --> 03:49.790
Q Well because graft Q Well is still a pretty new technology.

03:49.920 --> 03:56.520
So there is parts of it that are going to be really different but I promise you that by the end of it

03:56.550 --> 04:03.780
you guys will understand how to work with it because the benefits are worth the slight complexity that

04:03.780 --> 04:04.330
it will bring.

04:05.190 --> 04:11.310
But let's first bring in this library and we'll talk more about what it can do for us as we build out

04:11.490 --> 04:18.130
our code so we'll go back to your terminal and what you're going to include is you're going to include

04:18.160 --> 04:23.520
three packages you're going to run a yarn ad and you're gonna say Apollo boost.

04:23.860 --> 04:32.200
So with 1 p and two l's you're gonna say react Apollo and you're also gonna say graph Q well so make

04:32.200 --> 04:39.710
sure there's no dash between the graph and the Q Will we're gonna include these three libraries and

04:39.710 --> 04:46.430
then we're gonna run yarn again so that we make sure that we also include all of the other dependency

04:46.850 --> 04:48.930
in our project.

04:48.960 --> 04:56.130
So while this is being done let me talk a little bit about the Apollo client now one of the big things

04:56.130 --> 05:03.930
that is great about Apollo is that when we query for things from our graph Q all server this client

05:03.930 --> 05:08.510
will make sure to cache the data that we've fetched.

05:08.790 --> 05:17.880
So let's say we fetch our collections data if we navigate back to our page and the request makes a new

05:17.880 --> 05:19.150
query against our graph.

05:19.150 --> 05:26.340
Q all for those collections again if none of the data has changed then graph Q is not going to make

05:26.340 --> 05:26.820
the request.

05:26.820 --> 05:33.990
It's simply just going to give us back the cached version of the code that it has because that way it

05:33.990 --> 05:40.460
doesn't actually have to make an extra request especially if nothing's changed.

05:40.470 --> 05:45.840
The other great thing is that if we used those items anywhere else inside of our application from that

05:46.080 --> 05:47.100
main fetch.

05:47.100 --> 05:52.950
So let's say we fetch all our collections anywhere where we use the one singular collection we will

05:52.950 --> 05:57.660
not have to re fetch it from our database because we only have a version of the cached on our front.

05:58.020 --> 05:58.800
So that's really good.

05:59.040 --> 06:01.710
And the client helps manage that data.

06:01.710 --> 06:05.670
Now let's actually work with it and we'll see more of what the benefits are.

06:06.180 --> 06:10.410
Now I know what I said might seem also a little confusing but we'll definitely see it when we start

06:10.410 --> 06:10.950
working with it.

06:12.930 --> 06:19.590
First thing that we need to do is we need to go into our index touch us because we need to instantiate

06:19.590 --> 06:26.570
the client itself the client being the Apollo client so we're going to import in a couple libraries.

06:26.700 --> 06:32.730
The first thing we're going to bring in is the Apollo provider from react.

06:32.730 --> 06:40.020
Apollo now this is very similar to the providers that we've already seen from both redux as well as

06:40.020 --> 06:43.530
the providers that we wrote ourselves in the context API.

06:43.530 --> 06:51.650
It just allows the rest of our application to be able to access the state that is stored on Apollo.

06:51.650 --> 07:03.520
The other thing we're going to need is this thing called Create H TTP link from Apollo link HDTV.

07:03.550 --> 07:11.260
Now this thing is what is going to let us actually connect our client to our specific endpoint that

07:11.260 --> 07:12.780
I was telling you about.

07:13.240 --> 07:17.560
So in our back and server it exposes one end point that we make all our queries against.

07:17.560 --> 07:24.210
And this HTC P link is what we're going to use to establish that connection next you're going to import

07:24.240 --> 07:37.240
in this thing called in memory cache from a Paul cache in memory in memory can't spell today.

07:37.710 --> 07:43.080
And this is the thing that Apollo uses to actually cache the data that it fetches.

07:43.080 --> 07:47.990
That I was telling you about so that it doesn't double cache or sorry it doesn't make double requests.

07:48.000 --> 07:48.240
Right.

07:48.240 --> 07:53.960
And it tries to be as optimal as it can about making requests and then keeping the data.

07:54.060 --> 08:01.600
And finally we are going to import in the Apollo client itself and this is going to be from this library.

08:01.610 --> 08:02.620
Apollo boost

08:06.510 --> 08:13.560
while it's true that we only installed three libraries if you remember we installed react Apollo Apollo

08:13.560 --> 08:20.700
boost and graph Q Well while graph calls a dependency that these two libraries depend on an Apollo boost

08:20.790 --> 08:26.320
is actually a bundle of smaller libraries that the Apollo team has built.

08:26.340 --> 08:31.650
That makes it easier for us including the link HDTV and the Apollo cache in memory.

08:31.680 --> 08:37.020
So what we installed we installed Apollo boost was a bunch of smaller libraries that give us a bunch

08:37.020 --> 08:40.480
of different functionalities that make our lives easier.

08:40.560 --> 08:45.490
So we're actually going to use them and see how they help us set up our client.

08:45.630 --> 08:52.050
So what we're gonna do is we are gonna first establish the connection to our backend so we're gonna

08:52.050 --> 09:02.340
say concert H TTP link is equal to create each TTP link and this is a function that takes an object

09:02.400 --> 09:12.200
as the argument the objects argument is going to be you are I and that property's value is going to

09:12.200 --> 09:21.120
be H T T P S slash slash Crown clothing dot com and that's all it is.

09:21.380 --> 09:24.830
This is pretty much that link that we were playing against in our playground.

09:24.830 --> 09:30.590
It's also the same link that actually represents our end point that I exposed to you for you use against

09:32.190 --> 09:38.980
so once you have your HDTV link we are going to also create our cache so our cash is going to be a new

09:39.040 --> 09:50.020
object which we call on our new in memory cache which is a class and this cash object is something that

09:50.020 --> 09:57.160
we're actually going to use to manage our data so you can kind of see it similar to a top level reducer.

09:57.160 --> 10:04.580
It's kind of like just a object that we use as local storage for application after that.

10:04.740 --> 10:10.500
What we're going to do is actually make the client so to do that we're gonna say const client equals

10:10.620 --> 10:19.120
new Apollo client and we're going to pass into it an object and this object is going to take the properties

10:19.540 --> 10:23.940
of link going to our new HDTV link.

10:23.990 --> 10:26.940
So now it knows what to request to.

10:27.200 --> 10:31.570
And then we're also going to say the cash goes to the cash.

10:31.680 --> 10:38.300
So because it's already named Cash we can just use this shorthand which will set cash to our cash and

10:38.300 --> 10:43.990
that's our client now we've just got to make sure to pass it into our Apollo provider which will wrap

10:43.990 --> 10:50.500
our application and then give our application access to the context of the data that is stored inside

10:50.500 --> 10:55.180
of Apollo as well as allow us to actually make requests with Apollo.

10:55.270 --> 10:57.550
So we're gonna say Apollo provider

11:02.140 --> 11:10.740
and inside is a property called client that we pass the client and now we've hooked it up.

11:10.740 --> 11:16.020
But we can actually test the client before anything else just to make sure that it's all working.

11:16.080 --> 11:18.120
So let's actually make a request.

11:18.180 --> 11:23.250
The first thing we're gonna do is we're also going to import this thing called GQ Elle which is a function

11:23.430 --> 11:25.370
from Apollo boost.

11:25.470 --> 11:32.010
Now as you remember the shape that we're requesting for our data actually looks different from Jason.

11:32.730 --> 11:37.120
So we actually have to have something that understands what this is.

11:37.200 --> 11:43.250
So let's just go back to our application and we're going to make a request with the client itself.

11:43.380 --> 11:52.890
We're gonna say client dot query so on the client there's actually both the mutation and the query parameters

11:52.890 --> 11:59.070
that we can use in order to make either a request for data or a request to update data.

11:59.130 --> 12:06.540
We're just going to use the query key and it's a method that takes a object and this object is going

12:06.540 --> 12:11.720
to need the same structure of the key that we sent into our back in.

12:11.730 --> 12:14.750
So if you remember we sent in query first.

12:14.760 --> 12:15.030
Right.

12:15.030 --> 12:21.490
So we'll say query which goes to and then here is where we're gonna use that GQ Elle tech.

12:21.630 --> 12:23.850
So we're gonna say it's gonna be a GQ Well object.

12:23.850 --> 12:24.090
Right.

12:25.440 --> 12:30.900
And by wrapping it in GQ Well now we can type those graphical bindings that we had that we saw that

12:30.900 --> 12:32.540
look like a Jason object.

12:32.970 --> 12:39.480
So we're going to have those braces and we're literally pretty much just going to copy in whatever it

12:39.480 --> 12:44.170
was that's here so we can even just use this one in fact right

12:47.980 --> 12:55.810
and now what the query returns us back is a promise and the promise will resolve to the data if it managed

12:55.810 --> 12:58.150
to fetch us this data successfully.

12:58.150 --> 13:03.820
So we're just going to say dot then with the response and we're just going to console log.

13:03.820 --> 13:08.100
The response and that's pretty much it.

13:08.100 --> 13:13.060
If we go back to our application now we see that we've got it back.

13:13.130 --> 13:20.840
We see that we got back this object and on the data with that Query name that we saw when we made the

13:20.840 --> 13:22.220
request ourselves as well.

13:22.370 --> 13:28.250
We have our object with our I.D. and the items on it.

13:28.270 --> 13:34.050
So this is pretty much how we use the client in order to make requests and it's actually really easy

13:34.070 --> 13:41.330
use if we were to manually just use the client but this library has a Apollo boost library actually

13:41.330 --> 13:47.390
takes it a step further and it gives us access components that will handle loading an error states for

13:47.390 --> 13:53.800
us which is why again we had our spinner component added into this project now in the next lesson we're

13:53.800 --> 14:00.100
going to leverage this new Apollo client to make requests for the collections and then actually populate

14:00.130 --> 14:02.860
some of our components with that data.

14:02.860 --> 14:04.390
So we'll do that in the next lesson.
