WEBVTT

00:02.070 --> 00:03.310
Welcome back.

00:03.330 --> 00:08.460
Let's start to actually write a test for the Google search function.

00:08.460 --> 00:15.030
The first thing we want to do is obviously have access to this Google search function but in our test

00:15.030 --> 00:17.280
file and that's simple.

00:17.290 --> 00:19.480
This is simply just JavaScript.

00:19.480 --> 00:23.840
We can just export this function and import it in here.

00:23.980 --> 00:31.810
Now because this is node and we're now running in the browser or using Babel or wetback we don't have

00:31.810 --> 00:36.070
the import and export statements yet node is working on that.

00:36.070 --> 00:44.710
But for now they're still using common J yes which as you might know has the syntax module that exports

00:45.520 --> 00:46.690
equals.

00:46.690 --> 00:52.710
And we'll just do the Google search we're going to export this.

00:52.810 --> 01:03.660
And then finally we can import this at the very top of this test by saying cost Google Search equals

01:05.180 --> 01:09.770
require from the script for

01:13.390 --> 01:23.820
let's say that and just to test the largest console door log this and do google search safe run NPM.

01:24.010 --> 01:27.200
Test.

01:27.310 --> 01:27.970
All right.

01:27.970 --> 01:34.880
So we have our console log of Google search that's on script Dodge.

01:34.890 --> 01:35.360
Yes.

01:35.440 --> 01:39.160
But also in the test we see that we're logging out.

01:39.160 --> 01:43.220
Function Google search which is great.

01:43.240 --> 01:48.790
I'm going to comment to sell for now because we know it's working we don't want a console log.

01:49.010 --> 01:56.630
But you might have also noticed that it's kind of annoying running NPM test over and over and over.

01:56.780 --> 02:05.010
And luckily for us with just we can do a nice easy command dash dash watch and then we give it what

02:05.010 --> 02:06.320
to watch for in our case.

02:06.330 --> 02:08.020
All JavaScript files.

02:08.160 --> 02:16.540
So anytime we make changes to any JavaScript files just is going to watch out for those and have the

02:16.600 --> 02:19.800
test running constantly.

02:20.000 --> 02:20.860
Let's see what I mean.

02:20.930 --> 02:32.760
I'm going to save this and run NPM test and if you're wondering why your run NPM test and not NPM run

02:32.760 --> 02:41.790
test that's just the default of NPM if you do NPM start or NPM test you can't run those two commands

02:41.790 --> 02:43.080
without the run word.

02:43.080 --> 02:49.890
But if you do anything that you created yourself like NPM bake a cake you have to do NPM run bake a

02:49.890 --> 02:51.440
cake.

02:51.460 --> 02:51.660
All right.

02:51.660 --> 02:53.460
So now it's running.

02:53.530 --> 02:59.350
If I change anything in here too let's just have save it.

02:59.350 --> 03:02.710
You see that it's now changing if I change this.

03:03.040 --> 03:08.170
It's constantly updating with a new test but nothing is happening in here yet.

03:08.260 --> 03:14.220
So let's write an actual test that we can use now that we have the Google search function.

03:14.350 --> 03:15.340
We want to test it.

03:15.340 --> 03:18.530
We want to say Google search.

03:18.610 --> 03:30.100
Give us some sort of a dummy input let's say test test and somehow say whatever this returns should

03:30.100 --> 03:31.660
match whatever.

03:31.710 --> 03:33.940
And remember that's an assertion library you want.

03:33.950 --> 03:38.830
We want to make an assertion and you may notice one issue here.

03:38.830 --> 03:41.320
What about the database.

03:41.320 --> 03:46.390
Well we'll have to export this database as well.

03:46.390 --> 03:47.360
Right.

03:47.500 --> 03:48.790
And we totally can.

03:48.790 --> 03:52.850
We could do Google database and added to the module exports.

03:53.230 --> 03:55.540
But is that realistic.

03:55.630 --> 04:03.130
You see in real life you're not going to just export the database and imported into a test and have

04:03.130 --> 04:05.350
the test actually go through the database.

04:05.350 --> 04:09.430
That's really expensive really slow and a huge headache.

04:09.430 --> 04:16.870
Ideally you want a market you want to pretend that we have of database in here so that it makes tests

04:16.990 --> 04:18.900
run faster.

04:18.910 --> 04:20.470
Let me show you how we can do that.

04:20.470 --> 04:32.080
We can just say D.B. mock a database mock and this mock will have some dummy database which isn't actually

04:32.080 --> 04:34.830
our real database just something that we can test on.

04:34.840 --> 04:42.430
So let's say this one has dog dot.com it has cheese puff dot com

04:47.170 --> 05:00.960
it has let's say Disney icon and it has dog pictures dot com so completely different from our real database.

05:01.080 --> 05:02.460
All right so we have this now.

05:02.470 --> 05:11.650
But the problem is well Google search up until this point was using the Google database and if we run

05:11.650 --> 05:13.550
this function and script that test.

05:13.650 --> 05:14.360
Yes.

05:14.530 --> 05:17.170
Well we don't have access to that database.

05:17.170 --> 05:26.230
We'd have to manually change the function and make sure that it filters through the DB mark in a good

05:26.230 --> 05:32.020
way of solving this issue and the way you want to write your functions is again you want them to be

05:32.260 --> 05:38.310
pure and you also want to add things to them like a database through something called dependency injection.

05:38.440 --> 05:47.410
That is in order for us to make this reusable and use it in other parts of our code base have the database

05:48.160 --> 05:56.380
injected into google search so that anybody using it can like I am and the test can inject this DB mark

05:56.650 --> 06:01.430
instead of the real database and that's really easy to do.

06:01.530 --> 06:09.920
All we need to do is pass it a parameter of let's say D.B. and I'm going to change this into DB.

06:10.110 --> 06:13.200
And now this Google search is more extensible.

06:13.350 --> 06:20.730
We can add whatever database we want to filter now all we need to do is in our what we call the function

06:21.180 --> 06:27.050
is to add a single parameter of Google database

06:30.260 --> 06:45.980
if we comment that out and go back to our test file we can enter the D.B. mock database let's save now

06:46.310 --> 06:49.180
and see what happens.

06:49.200 --> 06:55.240
All right test is passing but we're not really testing anything right now.

06:55.350 --> 07:00.840
We're just returning things and running this function but that's not where we want to test.

07:00.840 --> 07:03.370
It's not very meaningful that we run this function.

07:03.510 --> 07:13.580
We want to assert that this does what we expected to do and again just like we had the it keyword just

07:13.610 --> 07:21.160
gives us a nice slow function for us to use to go to using matches.

07:21.420 --> 07:28.860
We see that in their documentation they have the expect and to be and they have a few other things that

07:28.950 --> 07:32.800
you can use to be on to be defined to be false see truth.

07:33.090 --> 07:35.800
And they have a ton.

07:36.050 --> 07:50.550
For now let's comment this out and say that we expect hello to be hello hello to echo Hello.

07:50.780 --> 07:51.080
All right.

07:51.100 --> 07:52.560
Let's save that.

07:52.600 --> 07:53.090
All right.

07:53.110 --> 08:05.360
Everything is passing but if I change this to know and save Oh I get a failed test it says it expected

08:05.450 --> 08:12.890
the no value but received hello and it's got pretty nice output it shows you which line failed and what

08:13.250 --> 08:14.910
the test failed it.

08:15.350 --> 08:25.750
Using that logic let's change now the Google search to have expect and you know what.

08:25.770 --> 08:34.580
Let's keep this test because I like this test and we'll do Hello at hello and calls this it is a silly

08:34.790 --> 08:38.870
test and create another test.

08:38.870 --> 08:41.180
Again we can just have as many as we want.

08:41.360 --> 08:50.460
And this on will say it is searching Google and in here we'll have the function

08:54.080 --> 09:03.910
lets out of space America's that looks nicer and we'll say that we expect Google search and we can just

09:04.300 --> 09:05.080
copy this

09:08.410 --> 09:15.430
we expect Google search and we're running that function with test test D.B. mock and here we can use

09:15.430 --> 09:22.610
instead of to be we can also do to equal and within the two equal.

09:22.680 --> 09:25.900
Now let me just create a new line just so you can see it.

09:26.130 --> 09:33.250
It's going to say we expected to equal an empty array because there's no test test here.

09:33.270 --> 09:33.690
Let's say

09:36.780 --> 09:39.210
Oh and I forgot a little bracket here.

09:39.210 --> 09:42.420
We want the expect to have the result of this.

09:42.420 --> 09:44.570
So we need an extra bracket over here.

09:44.610 --> 09:46.350
So make sure you get that right.

09:46.420 --> 09:50.910
Save Oh and we don't need that now.

09:50.910 --> 09:51.710
Perfect.

09:51.870 --> 09:54.780
Again maybe not having it on two lines is better.

09:54.780 --> 09:56.220
So we can see.

09:56.400 --> 10:05.070
So we have the expected function that runs this and two equal to tasks that this equals empty array

10:06.320 --> 10:15.620
we can now add another line and let's say that now we want to expect Google to test dog and if dog exists

10:15.860 --> 10:27.650
we wanted to include these two Web sites so we can add dog dot com to this array and also dog pictures

10:27.910 --> 10:29.730
dot com to this Ray

10:33.330 --> 10:38.900
and let's save.

10:39.060 --> 10:39.750
All right.

10:39.750 --> 10:42.050
This is running and passing.

10:42.150 --> 10:48.300
We still have two tests because while the it there's only two of them.

10:48.420 --> 10:57.710
But if I change this to let's say that just D.G. I'll get in there because we got something different

10:57.710 --> 11:01.990
than what we expected we expected a different array.

11:02.000 --> 11:02.870
There you go.

11:02.870 --> 11:08.880
We have our very first test I'll see in the next video by.
