WEBVTT

00:00.120 --> 00:06.750
OK so I know those last few sections were really theoretical but I'm glad you stuck in there because

00:06.750 --> 00:08.690
now comes the exciting part.

00:08.820 --> 00:11.320
We're going to build our e-commerce platform.

00:11.460 --> 00:20.720
So first let's use create react at to build out our project for us so I'm gonna call it Crown clothing

00:20.720 --> 00:21.220
actually.

00:23.290 --> 00:27.910
Now this is gonna take a little time so we just have to wait for create react app to finish setting

00:27.910 --> 00:29.380
up our Project

00:32.170 --> 00:33.080
Awesome.

00:33.160 --> 00:42.390
So what we're gonna do is we're going to C.D. into our new project and let's open it up just like last

00:42.390 --> 00:43.060
time.

00:43.260 --> 00:51.840
It's given us a couple of files that we don't actually need so we don't need any of this service worker

00:51.840 --> 00:54.080
code inside of index touch us.

00:55.270 --> 00:57.460
So let's just get rid of it.

00:57.500 --> 01:09.420
We also don't need any of this stuff inside of our adult J S file including this class name and instead

01:09.450 --> 01:14.800
I'm just gonna write Hello world and we also don't need this logo.

01:16.840 --> 01:19.650
Now in app CSX we don't need any of this CSF.

01:19.650 --> 01:23.040
So let's get rid of it and there we go.

01:23.180 --> 01:23.600
OK.

01:23.640 --> 01:29.190
Now our project is pretty much set up for us to start working with.

01:29.260 --> 01:35.960
So while we're gonna do is we're gonna evaluate what it is that we need to build so when we look at

01:35.960 --> 01:44.480
this this is the home page and on the home page there is a header component which we can build after

01:45.630 --> 01:53.960
but looking at just the content of the page there are these five menu item components right.

01:54.090 --> 01:59.820
And these three looks similar and these two look similar but if we look closely watched you realize

01:59.820 --> 02:03.060
that all five of them are the same component.

02:03.060 --> 02:09.870
The only difference is that these ones are bigger than these ones so we definitely have to build this

02:09.870 --> 02:18.690
menu item component and there's also a component that's holding these five elements together.

02:18.690 --> 02:26.570
So there is like a directory menu component we've got to build as well but when we look at this component

02:26.690 --> 02:35.930
we'll see that there is outside container of some kind and an inside container that holds a title and

02:35.930 --> 02:36.650
a subtitle.

02:36.650 --> 02:37.010
Right.

02:37.130 --> 02:44.800
So it's a div with a div and then there are two text HDMI elements inside.

02:44.840 --> 02:55.040
So let's build that first what I'm gonna do is I am going to make a new file called Home Page dock component

02:55.340 --> 03:06.220
dock GSI we're gonna import react from react and we're gonna make it a concept home page which is gonna

03:06.220 --> 03:13.420
be a functional component because we don't really need any lifecycle methods at this point nor do we

03:13.420 --> 03:25.160
need to store any state so let's add in our first outside com Taner which will be our home page and

03:25.160 --> 03:32.060
then inside will be those two components that we're talking about the container for the menu and then

03:32.060 --> 03:38.350
the actual menu items so we will move them into their own files after.

03:38.350 --> 03:41.020
But let's just put it down so we can see it first.

03:41.650 --> 03:55.350
And this I'm gonna call directory menu and then the inside div I'm going to call my menu item inside

03:55.350 --> 04:00.160
of our menu item we know that there is this content container right.

04:00.280 --> 04:10.660
So let's just make another div and give it the class name content and then inside of our content we

04:10.660 --> 04:14.140
want an H1.

04:14.330 --> 04:15.650
That is our title

04:19.080 --> 04:29.690
and here we just want to put the text hats and then we also want a span right after that will be our

04:29.690 --> 04:34.190
subtitle with a text shop.

04:34.380 --> 04:34.610
Now

04:38.530 --> 04:43.810
now let us copy this five times just for now.

04:43.820 --> 04:50.720
We'll end up making the components later and we are going to put jackets

04:54.630 --> 04:59.440
and then this will be women's and this will be men's.

04:59.460 --> 05:07.360
Now if we save this we have to also remember to export our new function outside.

05:07.360 --> 05:07.600
Right.

05:07.630 --> 05:13.940
So let's just export as the default because we're probably not going to export anything else from our

05:13.940 --> 05:19.010
home page component file let's import in home page

05:26.000 --> 05:26.840
think it's capital.

05:27.410 --> 05:28.600
Yes it is.

05:28.730 --> 05:29.510
OK.

05:29.570 --> 05:37.020
Now instead of hello world let us render our home page component OK.

05:37.050 --> 05:48.020
So we have to remember to run our project and let's see now OK there we go.

05:48.030 --> 05:57.450
So this is just our directory without any of the styling so for the styling of this project we're actually

05:57.450 --> 06:05.840
going to use something called SAS and SAS is just a upgraded version of CSX.

06:05.880 --> 06:12.630
So it's an it is a different language and it has a different file type called SAS but it reads very

06:12.630 --> 06:13.940
similar to CSX.

06:14.010 --> 06:16.250
But it has a lot of quality of life improvements.

06:16.290 --> 06:18.410
And I'm going to show you what it looks like.

06:18.510 --> 06:27.080
So in order for us to include it we first have to add node SAS to our project.

06:27.190 --> 06:33.400
Now the great thing about create react app is that it actually comes with the configuration for SAS

06:33.670 --> 06:34.560
right out the gate.

06:34.600 --> 06:41.800
As long as we include this package create react app will actually configure web hack and babble to come

06:42.070 --> 06:47.260
br our SAS files into C Ss files because the browser can only read the SS files right.

06:47.290 --> 06:49.450
So this is actually really convenient.

06:49.450 --> 06:56.920
And now that that's included we have to remember to restart our server again.

06:57.150 --> 06:57.860
OK.

06:57.930 --> 07:00.760
Now this might happen you might see this bug.

07:00.990 --> 07:06.270
All this is saying is that our version of babble just that got installed when.

07:06.300 --> 07:14.880
Which is probably a dependency of our node SAS is now different from what our yarn file is expecting.

07:14.880 --> 07:18.750
So what our initial package was expecting is different now.

07:18.750 --> 07:21.060
So we just got to follow these instructions.

07:21.060 --> 07:21.260
Right.

07:21.270 --> 07:24.570
And we'll just follow the yarn instructions because we're using yarn.

07:24.690 --> 07:33.910
So let's first delete the yarn log so let's delete yea and lock ya under lock.

07:35.170 --> 07:39.640
And then let's delete the node modules folder

07:42.830 --> 07:43.000
now.

07:43.000 --> 07:45.220
Here it says to remove Apple just from our package.

07:45.230 --> 07:51.320
Jason but we actually won't have that scene because it's something that create racked up hides from

07:51.320 --> 07:55.140
us because those are all dependencies that it's managing.

07:55.430 --> 07:57.000
So we won't do step 3.

07:57.260 --> 08:07.580
And instead we are going to run yarn to install all of our new packages all over again and hopefully

08:07.580 --> 08:13.930
this time all of the versions will match appropriately so there is a lot of waiting.

08:13.960 --> 08:18.610
There's definitely always so much waiting Come on almost there.

08:18.610 --> 08:19.150
Awesome.

08:19.160 --> 08:22.570
Ok so now if we run yarn start again.

08:22.570 --> 08:28.610
OK so now that our project is loaded let's just include it in that SAS file.

08:28.630 --> 08:34.440
So I will show you what are SAS code is going to look like.

08:34.440 --> 08:42.520
So we're gonna make another file called Home Page dot styles dot SAS net and we're gonna paste our SAS

08:42.520 --> 08:44.550
in now.

08:44.700 --> 08:47.800
It actually looks very similar to C assess if you've noticed.

08:47.820 --> 08:48.260
Right.

08:48.270 --> 08:54.300
This is pretty much just a classic selector that has some styles in it and then another class selector

08:54.300 --> 09:01.770
with some styles in it but inside of this one we'll see that there are other things inside other than

09:01.770 --> 09:04.510
just our typical classes right.

09:04.610 --> 09:11.120
Ah ah sorry our typical styling so here whenever you see this Ampersand symbol this Ampersand pretty

09:11.120 --> 09:18.890
much means this class that is above it and then it wants to append this additional selector right this

09:18.890 --> 09:19.850
first child.

09:19.970 --> 09:28.370
So it's saying menu item first child gets this style so anywhere where a menu item is the first child

09:28.400 --> 09:29.820
is going to get this style.

09:29.840 --> 09:30.850
Same with this one.

09:30.920 --> 09:40.210
It's the equivalent of writing menu item and then first child in our regular CSX.

09:40.220 --> 09:40.890
Right.

09:41.060 --> 09:47.030
But SAS just lets us nest it so that it's easier to read and then you'll see this content class name

09:47.060 --> 09:48.480
with its own styling as well.

09:48.500 --> 09:49.330
Right.

09:49.460 --> 09:56.750
If you hover over this you'll see that what it's saying is that any class of content that sits between

09:56.930 --> 10:01.150
any element with the class of menu item will get these styles in it.

10:01.580 --> 10:08.420
So rather than writing normally what we would do would be menu item and then dog content like this.

10:08.420 --> 10:18.110
Right instead what we're gonna do is we are going to just write it nested inside and title is it going

10:18.130 --> 10:18.970
to be the exact same.

10:18.970 --> 10:25.600
So any element with the class title inside any element with the class content inside any element with

10:25.600 --> 10:33.670
the class menu item right is going to get these styles and that's what's great about SAS is that it

10:33.670 --> 10:39.580
just lets us not have to write a bunch of CSA selectors that look unconnected to each other.

10:39.640 --> 10:40.370
Right.

10:40.420 --> 10:48.450
We can just nest them all inside of the block of their relevant parent child relationship and you'll

10:48.450 --> 10:52.700
notice that we did the same thing in our HCM mail for our home page right.

10:52.710 --> 10:59.340
We have this menu item that has a content right child and then inside of that content is the title and

10:59.340 --> 11:06.180
subtitle just like our SAS here our menu item has a content child which has a title and a subtitle Inside

11:06.180 --> 11:07.620
of it.

11:07.650 --> 11:21.750
Now we just have to make sure to import our new SAS file into this file and if we save if we go now

11:21.750 --> 11:31.690
to our project we'll see that it looks very much closer without the images right to this now now in

11:31.690 --> 11:39.250
the next lesson we are going to start moving these components into their own folders as well as exploring

11:39.250 --> 11:43.230
what our final folder structure is going to look like.

11:43.300 --> 11:50.820
Now our project which is actually not on GitHub yet so let's do that let's go back to our browser let's

11:50.820 --> 11:59.300
go to get hub and let's create a new repository I'm going gonna name my repository Crown clothing after

11:59.300 --> 12:07.640
our project and then we're going to create it and copy this essay to each key that they give us then

12:07.640 --> 12:16.050
we've got to go back to our terminal into our project and write get remote add origin and then paste

12:16.050 --> 12:24.030
in that code and now we've linked our project to that remote that we just create and GitHub and now

12:24.030 --> 12:31.100
if we check the status with kid status we'll see these are the modified files and these are the new

12:31.100 --> 12:37.900
files that we added so we want to add them all with get add dash a two hour commute and then we're going

12:37.900 --> 12:44.810
to write get commit dash M for message and we're gonna say in our commit message something that is explicit

12:44.870 --> 12:54.590
about what this commit contains so I'm gonna say created Project with create react app and added files

12:54.590 --> 13:10.740
for home page now I'm going to get push all our commit to origin master and now if we check and we refresh

13:13.400 --> 13:19.310
we'll see all our code up awesome now that we have a repository setup let's move on.
