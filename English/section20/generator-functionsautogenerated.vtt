WEBVTT

00:00.890 --> 00:09.530
In this lesson we are going to explore the most common building block of a saga which is a generator

00:09.680 --> 00:11.140
function.

00:11.230 --> 00:18.760
Now the generator function is a new ish feature that was brought into the javascript ecosystem and native

00:18.760 --> 00:27.280
to JavaScript now and what it is is a function that resembles async await.

00:27.280 --> 00:30.420
Now it's not exactly a single way.

00:30.580 --> 00:38.140
It's got almost a different flair to it but it's very similar in the sense that with our async await

00:38.140 --> 00:44.530
functions we await are asynchronous events right.

00:44.560 --> 00:49.720
Our promise based events where we pause the execution instead of an async function.

00:49.750 --> 00:57.550
Whenever we see the awake call while generator functions are very similar in the sense that they also

00:57.550 --> 01:05.170
pause their execution whenever they see a specific key inside of the function and that key is called

01:05.350 --> 01:06.730
a yield.

01:06.760 --> 01:13.780
Now I'll show you what that looks like when we write our first generator function now in order for us

01:13.780 --> 01:14.140
to do it.

01:14.140 --> 01:20.620
There's actually a special syntax we actually have to declare it with our old school style of writing

01:20.710 --> 01:21.830
function declaration.

01:21.860 --> 01:29.620
So we actually got a write function but what we do is we put the star to declare that this is a generator

01:29.620 --> 01:33.640
function and then what we can do is we can name our function.

01:33.650 --> 01:41.170
So I'm gonna name it Jen and it's going to take no parameters for now and all this function does is

01:41.170 --> 01:52.700
it calls console dot log a just a letter A and then a console dot logs the letter B.

01:52.710 --> 02:01.230
Now when we instantiate this function meaning that when we invoke it we actually get back this generator

02:01.320 --> 02:05.620
object which we can cast as some variable G.

02:05.620 --> 02:12.540
All right I'm just gonna name this constant G and it's gonna be equal to us invoking Jen the function.

02:12.600 --> 02:22.760
Now if this is a regular function the moment I invoke Jen console log and console log B will be logged

02:22.760 --> 02:27.950
out to our browser and then G would just be set to undefined because functions that don't return anything

02:28.100 --> 02:36.340
would just return undefined but in our case when we invoke this Jen we see that nothing has happened.

02:36.530 --> 02:44.030
In fact if we were to log our g we see we get this weird Jen the suspended generator kind of object

02:44.030 --> 02:44.300
right.

02:44.300 --> 02:53.950
So this is a generator object and what we do on it is we call dot next on it and what dot next will

02:53.950 --> 03:00.700
do is it will actually resume the execution inside of our function.

03:00.700 --> 03:07.780
So at this point when we invoked it for the first time we instantiated this generator object that actually

03:07.780 --> 03:14.170
is aware of the code inside of this function but the execution inside of the function is paused.

03:14.170 --> 03:21.380
So until we call Jen dot next this function actually will not run our console logs.

03:21.510 --> 03:29.430
But the moment I do we see that it does it logs out a and b but then you see that we get back this object

03:29.430 --> 03:38.850
from calling dot next and what it is is an object with a value prop and a done prop the dun prop is

03:38.850 --> 03:44.790
a boolean telling us if there's anything else in the function to run or has it run through its entire

03:44.790 --> 03:49.480
course which we know it does because all we did in our function was console log.

03:49.620 --> 03:50.980
Things.

03:51.050 --> 03:58.290
Now this will change once we start using the yield key and the Yuki will also give this value of value.

03:58.460 --> 04:04.260
And I'm going to show you how that works let's refresh and let's make a new function right.

04:04.350 --> 04:10.250
So again we're gonna call it Jen but this time we're gonna take some integer value and what we're gonna

04:10.260 --> 04:21.780
do is we are going to yield the value that we pass in the next call we're going to yield I plus 10 so

04:21.780 --> 04:25.700
that's all we've done is essentially we're saying we write this function right called John.

04:25.860 --> 04:31.620
It takes some integer value some number and then it yields that number that we passed in.

04:31.740 --> 04:34.730
And it also yields then the number plus 10.

04:34.740 --> 04:41.970
So now we're gonna set some G value equal to our John initialized with the value of let's say actually

04:41.970 --> 04:45.290
five.

04:45.300 --> 04:47.670
Now what happens when we call it G Titan.

04:47.760 --> 04:53.550
We know that we are going to actually get back that similar object that we saw before right.

04:53.550 --> 04:58.770
You remember when we logged at the site when we invoke next the first time that object with the value

04:58.770 --> 05:01.410
key and then the done key.

05:01.410 --> 05:07.570
Well I'm actually just going to make sure to hold onto that value so I call it G OBJ right.

05:07.580 --> 05:15.290
Right here and now when I call it you'll actually see that when we see what's on our G OBJ right.

05:15.290 --> 05:23.180
Our G OBJ is equal to that object except now value is the I value that we yield it out the first time

05:24.540 --> 05:30.600
and we'll also see that done is false meaning that there is more that we can actually continue the execution

05:30.600 --> 05:37.700
on inside of our generator function if I were to call G dot next again this time.

05:37.710 --> 05:38.050
Right.

05:38.070 --> 05:39.510
And let's set it to another object.

05:39.510 --> 05:47.360
Let's call it just J OBJ right well now we'll see that J OBJ has the value of the next yield at value

05:47.510 --> 05:51.000
which is five plus 10 which gives us 15.

05:51.200 --> 06:00.150
It also now sees that Dunn is still false if we were to call g the next one last time then we see that

06:00.150 --> 06:04.560
the Dunn is true but there's no value that gets return in the undefined.

06:04.590 --> 06:10.800
Now this is the main thing to remember with yields the moment we call yields inside of our generator

06:10.800 --> 06:14.400
function the yield key is pretty much telling our generator function.

06:14.430 --> 06:17.450
Oh hey I don't want to do anything with this right.

06:17.480 --> 06:18.920
I'm just going to resolve it.

06:18.960 --> 06:24.100
However it is if it's a asynchronous request I'm going to resolve the async request we're going to pass

06:24.150 --> 06:29.760
that value out into this object that we get back.

06:29.760 --> 06:29.930
Right.

06:29.940 --> 06:33.620
And I'm gonna set it to the value prop.

06:33.700 --> 06:36.100
Now you might be wondering when it's done.

06:36.100 --> 06:38.740
Is there a way for us to get a value in this function.

06:38.740 --> 06:39.850
Well actually there is.

06:39.850 --> 06:41.450
The way that we would do it.

06:41.540 --> 06:41.770
Right.

06:41.770 --> 06:49.590
Let's just copy this is we would actually cast it as the return value so the last thing we can do is

06:49.590 --> 06:52.680
say return twenty five.

06:52.680 --> 07:01.240
And now if we did the same thing as we did last time with Gen 5 if I do G dot next G dot next right

07:02.230 --> 07:05.180
we see that this is up to second yields.

07:05.320 --> 07:11.560
If I do that next one more time while the final value that gets resolved is our return from our function

07:12.160 --> 07:14.080
and then the done is true.

07:14.080 --> 07:20.110
But the main benefit is that the yield will invoke the value right of whatever it's yielding and return

07:20.110 --> 07:23.480
it outside of our generator.

07:23.510 --> 07:27.070
This is primarily what generators are used for.

07:27.080 --> 07:34.550
It's just if you want to stash multiple executions but you want to control when you want to move and

07:34.550 --> 07:44.910
continue the execution in this function onwards and this is the basis of sagas sagas work on this yield

07:44.910 --> 07:53.550
based format because they need to know and give us control over when we want to continue with an execution

07:53.910 --> 08:00.960
of the block of code that we've written or we want to do something with the first now it'll make more

08:00.960 --> 08:07.020
sense once we start writing it but I just wanted you to see this generator syntax I did not want you

08:07.020 --> 08:12.570
to be confused by what we're about to write because what we're about to write is going to look kind

08:12.570 --> 08:15.870
of different from code that we've written before.

08:15.990 --> 08:19.430
The closest comparison I'm going to draw again is to async await.

08:20.070 --> 08:25.140
But now that we've seen this as well we just need to remember that whenever we see yield we just need

08:25.140 --> 08:32.960
to know that our code is stopping at this point even if it's asynchronous code just like async await.

08:33.030 --> 08:37.800
So let's dive into implementing sagas into our code base.
