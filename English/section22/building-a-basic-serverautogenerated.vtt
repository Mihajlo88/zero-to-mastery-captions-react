WEBVTT

00:00.700 --> 00:08.730
Now we're going to actually write our first back end server using express so inside of your server Dutch

00:08.770 --> 00:14.550
ass we have to import in the files and libraries that we've just installed.

00:14.770 --> 00:19.070
Now we're gonna use it with the node require and to do it.

00:19.080 --> 00:23.000
We actually have to set it equal to some value.

00:23.130 --> 00:29.490
So this is different from the iOS 6 import that we use when we wrote our front because we don't have

00:29.490 --> 00:37.320
access to yes 6 inside of our server because this is node code so require is pretty much the older version

00:37.440 --> 00:39.850
of the import that you're used to using.

00:40.110 --> 00:41.670
And it just takes the syntax right.

00:41.670 --> 00:45.870
You set the actual variable equal to what you want it to be.

00:45.870 --> 00:51.250
So we're gonna bring in the library and we're gonna cast it to this variable called Express.

00:51.590 --> 00:53.530
We're gonna do the same thing for cause.

00:53.570 --> 00:55.960
And again I'll show you what it means when we actually use it.

00:57.170 --> 01:05.200
We're gonna do the same thing for the body parts or library and then we're also going to do the same

01:05.200 --> 01:12.360
thing for this new one called Path now path.

01:12.430 --> 01:19.270
We didn't actually bring in to our package that Jason because path gets bundled into any node project

01:19.950 --> 01:27.030
and what the module path does is it lets us build out path thing for our Directories.

01:27.100 --> 01:33.130
And the reason for that is because in file production builds most builds get optimized and you don't

01:33.130 --> 01:40.210
actually know a lot of the times what the directory name right you might be in path just allows it in

01:40.210 --> 01:43.010
the moment to calculate it for us.

01:43.030 --> 01:49.870
I know that might sound confusing but this is the main idea with path is that it allows us to dynamically

01:49.870 --> 01:57.410
build when we call it from our current directory to where we're actually trying to go and I'll show

01:57.410 --> 02:00.190
you what that looks like when we actually start using it as well.

02:00.200 --> 02:06.080
Now you remember I mentioned that we brought in this dot end package right in order for us to store

02:06.080 --> 02:06.880
our secret key.

02:07.250 --> 02:12.890
What you're gonna do is you're going to make a new file inside of your root called Dot and an inside

02:12.890 --> 02:17.600
of here you are going to set that secret key value that you had.

02:18.410 --> 02:23.620
So inside of your dashboard you are going to reveal the test key token.

02:23.720 --> 02:31.090
Copy that over and then you're gonna put it in here under stripe secret key like this equals.

02:31.130 --> 02:32.970
And then you're just going to paste it in.

02:33.020 --> 02:39.110
You don't need to put it in quotations but I'm not gonna do this on camera because I again you need

02:39.110 --> 02:45.710
to hide that secret key from people but just paste it here and then we'll be able to use it and then

02:45.710 --> 02:53.910
what we're gonna do is we're gonna say if process Dot and Dot note environment not equal to production

02:54.950 --> 03:03.670
meaning if we're in development or testing what we want to do is we want to then require IN OUR DAUGHTER

03:03.710 --> 03:12.000
IN LIBRARY AND WE'RE GONNA SAY config so this loads the short end into our process environment which

03:12.090 --> 03:21.160
allows our process thought and now to access that secret key and that's how we keep it secret now inside

03:21.160 --> 03:25.000
of a get ignore we are going to add the short end into it.

03:25.330 --> 03:32.860
And this way we make sure that we don't ever send any sensitive information we put in our door and into

03:32.860 --> 03:40.240
any repos because that pretty much eliminates the purpose of trying to make it secret and now we're

03:40.240 --> 03:46.140
going to actually use our Express app and we're going to do this by saying cost.

03:46.180 --> 03:48.190
App equals Express.

03:48.520 --> 03:57.180
So this will instantiate for us a new express application and then we're gonna say that we want the

03:57.180 --> 04:02.910
port that we host our app on to be either the process Dot and Dot port.

04:02.910 --> 04:03.180
Right.

04:03.180 --> 04:08.670
So if there's a port value on the process environment we're gonna use that port otherwise we're gonna

04:08.700 --> 04:10.980
put it on port five thousand.

04:10.980 --> 04:16.920
So our server is going to be on a different port than our local host our local host will be on three

04:16.920 --> 04:20.840
thousand and our server will be on five thousand.

04:20.910 --> 04:27.780
Now in order for our front end to actually be able to access our Web server we have to tell it that

04:29.260 --> 04:36.790
we want it to use that port whenever it makes API requests so I'll show you what we do here inside of

04:36.790 --> 04:42.880
your client's package that Jason you're going to add this proxy key which create react app will know

04:42.880 --> 04:44.280
how to use.

04:44.350 --> 04:50.410
And here you're gonna pass in a string that says H TTP slash slash local host

04:55.720 --> 05:02.980
and this will be how are create react app one know that when we pass it just you or else like not complete

05:02.980 --> 05:09.220
your URLs but the back of your URLs which you'll see when we actually do the stripe request that it

05:09.220 --> 05:13.900
will instead fire them off to local hosts five thousand instead of three thousand which will allow us

05:13.900 --> 05:15.850
to hit our back and server that we're writing.

05:16.510 --> 05:23.140
So just say that and then close this file and we'll continue with our server not just code.

05:23.140 --> 05:28.520
Now the next thing we want to do is we want to start leveraging these libraries that we brought in so

05:28.530 --> 05:33.810
in order to do that we're gonna say app use which is what we now get with our Express.

05:34.440 --> 05:41.160
And we're gonna pass in body parser dot Jason and this pretty much just says we're gonna make sure that

05:41.280 --> 05:48.210
any of the requests coming in I want you to process their body tag and convert it to Jason so we can

05:48.210 --> 05:48.730
use it.

05:48.730 --> 05:54.210
It's it's just that extra step done for us using this body parser middleware.

05:54.210 --> 05:59.070
Again you remember with fetch whenever we made a request when we got the response back we had to say.

05:59.130 --> 06:05.670
Jason on it this is pretty much a way for us not to have to do that every time and then we're also going

06:05.670 --> 06:13.820
to say app dot use body parser dot you are all encoded and we're gonna pass it this extended it goes

06:13.820 --> 06:15.260
to true.

06:15.260 --> 06:21.590
Now you might be wondering what is the all encoded while you remember we've actually used this before

06:21.590 --> 06:22.520
as well.

06:22.520 --> 06:28.700
You all encoded as a way for us to make sure that the U are L strings were getting in and we're passing

06:28.820 --> 06:33.200
out do not contain things like spaces or symbols right.

06:33.230 --> 06:39.110
Or if they do they get properly escaped because you are are very strict about what characters they're

06:39.350 --> 06:40.720
actually allowed to have.

06:40.730 --> 06:47.150
So this pretty much is another thing that they do for us using the body parts or library and then we're

06:47.150 --> 06:57.660
gonna use cause now what is cause course stands for cross origin request and what this does is if you

06:57.660 --> 07:04.980
think about it like this our web server is being hosted from some origin origin meaning like place like

07:04.980 --> 07:05.490
a port.

07:05.820 --> 07:12.030
So for example in development it's port five thousand or application or front and is hosted on port

07:12.030 --> 07:16.320
three thousand which is a different port and therefore a different origin.

07:16.320 --> 07:24.140
When our front end makes a request to our backend what course does is it's on most web servers by default

07:24.410 --> 07:30.480
it checks to make sure the origin is the same if it's not the same then it denies the request which

07:30.480 --> 07:31.750
is a safety feature.

07:31.770 --> 07:39.000
So for example if you're hosting your Google server for example let's say Google hosts a server to do

07:39.000 --> 07:42.090
all the search and hold all the data whatever back there.

07:42.180 --> 07:48.290
If another website like Amazon makes a request to the Google server Google will see that that website

07:48.360 --> 07:53.160
is coming from a different web server right a different origin because of course that one's hosted on

07:53.160 --> 07:54.120
the Amazon.

07:54.300 --> 07:57.560
So then it will be like oh OK this is across origin request.

07:57.570 --> 07:57.800
Right.

07:57.810 --> 08:06.300
I'm going to block it by using this or enabling it so that we're able to make requests from our local

08:06.300 --> 08:09.440
host 3000 to our port five thousand.

08:09.540 --> 08:12.180
That's the main benefit of passing in this cause library.

08:12.180 --> 08:20.590
It just allows it so that we're actually able to properly make requests to are back in server now.

08:20.780 --> 08:27.320
The next thing we're going to need to do is we're actually going to need to serve our client application.

08:27.320 --> 08:32.750
Now that we're hosting our own Web server what do I mean by this.

08:32.750 --> 08:38.350
Well what happens when we deploy to production is that we have this live web server.

08:38.420 --> 08:45.420
This node server that's being run on our Heroku you are all that we pass it whenever Heroku receives

08:45.450 --> 08:53.270
a request what it's going to do is it's going to determine based on the url path what to do.

08:53.610 --> 09:00.660
Because now we are dynamically in control of telling this node server what we want to host it what we

09:00.660 --> 09:04.630
want to send back to the client that's asking for something.

09:04.640 --> 09:11.180
So what we're going to say is that if process dot environment dot node environment is equal to production.

09:11.180 --> 09:11.390
Right.

09:11.390 --> 09:18.720
So if we're in production now what we want to do is we want to be able to serve all of the static files

09:18.780 --> 09:26.570
in our build and we do that by saying appetite use Express dot static path dot join

09:29.480 --> 09:34.220
underscore underscore Durning client slash build.

09:34.260 --> 09:37.080
So I know that was a lot of new things that we just saw.

09:37.170 --> 09:40.910
But let's walk through it so we're seeing app dot use.

09:40.930 --> 09:41.870
Right so we're express.

09:41.870 --> 09:48.740
I want you to use this Express dot static middleware function and what this does is that it allows us

09:48.770 --> 09:57.520
to serve a certain file inside of this you are all that we pass to it right or this path thing and the

09:57.520 --> 10:00.640
path that we passed was using our path library.

10:00.820 --> 10:08.980
And we're joining this directory keening which tells us what directory we're currently in and then we're

10:08.980 --> 10:11.210
pointing to client slash build.

10:11.230 --> 10:17.080
Now if you remember slash build was what gets built when we run our build script inside of our package

10:17.080 --> 10:22.810
that Jason and we want to serve all of the static files that are in there.

10:22.870 --> 10:24.840
So that's what this will do for us.

10:25.000 --> 10:30.450
But the only way that we're actually able to serve it is we have to say what route we want to use it.

10:30.730 --> 10:38.920
So we'll say apt get and then we'll pass it that star which means that this is for every euro any euro

10:38.950 --> 10:43.610
that the user hits we pass this get a function.

10:43.760 --> 10:52.090
And in this function we get a request and a response and what we want is we want to say that our response

10:52.150 --> 10:53.710
is to send the file.

10:53.710 --> 10:53.920
Right.

10:53.920 --> 10:59.410
So when we get a request a get request specifically if a user is trying to get something from any of

10:59.410 --> 11:11.350
our URLs we want to we want to send it are static files so let's take a look at this and get I get is

11:11.350 --> 11:20.920
how we tell our application what the rest parameters for each of you are all we'll be rest being either

11:21.190 --> 11:23.360
get post update or delete.

11:23.360 --> 11:23.530
Right.

11:23.530 --> 11:30.340
How we handle requests of those nature the get requests that we get from the front end when the client

11:30.400 --> 11:32.620
hits this route or any route.

11:32.640 --> 11:33.790
What we're saying here.

11:34.280 --> 11:37.050
Here's normally what we pass routes which we will do later.

11:37.270 --> 11:43.500
But here we're saying for any route that is not covered by the future routes we're going to write.

11:43.840 --> 11:48.820
I want you to do this as your response.

11:48.820 --> 11:55.660
So the function that we pass to this is the function that gets a request and a response the request

11:55.660 --> 12:01.750
representing the actual request that we're getting and the response being the actual response we're

12:01.750 --> 12:09.640
going to send back and here we're gonna say a red dot send file path dot join underscore underscored

12:09.670 --> 12:20.320
dir name client slash build and we're gonna say indexed dot HMO so we're gonna give them the index the

12:20.350 --> 12:26.700
H to mail file in our build which holds all of our code all of our front end client code is going to

12:26.700 --> 12:33.130
end up all being built into small modules and packages right that all get included into our base index

12:33.120 --> 12:41.690
that each team alpha and that's how we're going to serve our application from our actual final production

12:41.690 --> 12:49.790
build finally we're just going to say after listen on port and then the air so we're saying after all

12:49.790 --> 12:54.560
of this code gets run we want to start listening on port three that five thousand sorry.

12:54.560 --> 12:54.800
Right.

12:54.830 --> 12:57.750
So that's what the port key here is being used for.

12:57.950 --> 13:01.790
And if an error gets thrown then we want to throw an error.

13:01.850 --> 13:08.270
So if any error happens which is the second parameter that listen gets is a function that will call

13:08.810 --> 13:14.530
and then we want a console to log server running on port

13:17.660 --> 13:21.710
so if nothing's wrong if this is all that's going to look right it's just that we're running on this

13:21.710 --> 13:29.690
port and this I know it was a lot of code it's a lot of stuff and this is like back in code right.

13:29.690 --> 13:36.320
It's just so much setup that you have to learn but this is pretty much a really basic setup that we

13:36.320 --> 13:44.270
need to do using express in order for us to set up our stripe integration in the next lessons we're

13:44.360 --> 13:50.990
actually going to talk about integrating in stripe and hopefully once we write that code some of this

13:50.990 --> 13:53.330
code might start to make more sense as well.

13:53.330 --> 13:58.370
It's a lot to get thrown into at once part of it is a matter of just seeing more of it and then some

13:58.370 --> 13:59.180
of that will click.

13:59.750 --> 14:04.130
So in the next lesson we're going to actually write out our strike integration.
